#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of piebook - A small console-based ebook reader written in python
#
# Copyright (C) 2011 Louis Taylor <kragniz@gmail.com>                  
#                                                                            
# This program is free software: you can redistribute it and/or modify         
# it under the terms of the GNU General Public License as published by         
# the Free Software Foundation, either version 3 of the License, or            
# (at your option) any later version.                                          
#                                                                            
# This program is distributed in the hope that it will be useful,              
# but WITHOUT ANY WARRANTY; without even the implied warranty of               
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                
# GNU General Public License for more details.                                 
#                                                                           
# You should have received a copy of the GNU General Public License            
# along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0.txt 

import curses, time, json, os
from os.path import splitext
from threading import Thread
from optparse import OptionParser
import piebookData

class Book(object):
    '''Handle reading and manipulating lines from a text file'''
    def __init__(self, textFileName, lineLength=80):
        '''Create a book object'''
        self.lineLength = lineLength
        self.textFileName = textFileName
        self.text = open(self.textFileName, 'r')
        
        self.w = [] #words left over from the last line
        
    def setLineLength(self, length):
        '''Set the length of each line of the output'''
        self.lineLength = length
        
    def _checkLength(self, line):
        '''Return True if the length of line is not larger than the maximum
        length of the line'''
        return (len(line) <= self.lineLength)
    
    def _split(self, line):
        '''Split a string into substrings. Much simpler than Str.split(), keeps whitespace.'''
        l = []
        i = ''
        for c in line:
            if c == ' ':
                l += [i+' ']
                i = ''
            else:
                i += c
        l += [i]
        return l
    
    @property
    def position(self):
        '''Get the position in the book'''
        return self.text.tell()

    @position.setter
    def position(self, pos):
        '''Set the position in the book'''
        self.text.seek(pos)
        

    
    def setPositionPercent(self, percent):
        '''Set the position in book, by percentage'''
        fileLength = os.path.getsize(self.textFileName)
        byte = long(percent/100 * fileLength)
        self.position = byte
        
    def line(self):
        '''Return the next line'''
        line = []
        words = []
        
        if self.w:
            while self._checkLength(''.join(line)) and self.w:
                line += [self.w.pop(0)]
                
        else:
            if self._checkLength(''.join(line)):
                words = self._split(self._nextLine())
                while self._checkLength(''.join(line)) and words:
                    line += [words.pop(0)]
            else:
                self.w = [line.pop(-1)] + self.w
            
        while not self._checkLength(''.join(line)):
            self.w = [line.pop(-1)] + self.w
            
        self.w += words
        
        return ''.join(line).replace('\n', '')
            
    def _nextLine(self):
        '''Return a single line from the book'''
        return self.text.readline()
    
class BookHistory(object):
    '''Make and write the settings/progress for a particular book'''
    def __init__(self):
        self._historyData = {
            'bookFileName' : '',
            'position' : 0,
            'speed' : 2.5}
            
    def setBookFile(self, bookFileName):
        '''Set the filename of the book/text document'''
        self._historyData['bookFileName'] = bookFileName
        
    def setPosition(self, n):
        '''Set the current position in the book/text document in bytes'''
        self._historyData['position'] = n
    
    @property
    def speed(self):
        '''Return the delay between each line re-draw in seconds'''
        return self._historyData['speed']

    @speed.setter
    def speed(self, s):
        '''Set the delay between each line re-draw in seconds'''
        self._historyData['speed'] = s
        
    def position(self):
        '''Return the current position in the book/text document in bytes'''
        return self._historyData['position']

    def read(self, historyFileName=None):
        '''Read the settings made from a previous run of this program'''
        if not historyFileName:
            historyFileName = splitext(self._historyData['bookFileName'])[0] + '.hst'
        try:
            data = ''.join(open(historyFileName).readlines())
            self._historyData = json.loads(data)
            return True
        except:
            return False
        
    def write(self, historyFileName=None):
        '''Write the settings for next time the program is run'''
        if not historyFileName:
            historyFileName = splitext(self._historyData['bookFileName'])[0] + '.hst'
            
        f = open(historyFileName, 'w')
        f.writelines(json.dumps(self._historyData, sort_keys=True, indent=4))
        f.close()
    
class BookReader(object):
    '''Display the book in a terminal'''
    def __init__(self, screen, bookName, options):
        self.screen = screen
        
        self.options = options
        
        self.book = Book(bookName)
        self.history = BookHistory()
        self.history.setBookFile(bookName)
        self.history.read()
        
        if not self.options.beginning:
            self.book.position = self.history.position()
        
        self.exitObject = Exit()
        self.inputThread = InputThread(self.screen, self.exitObject)
        self.inputThread.start()
        
        self._paused = False
        
        curses.curs_set(0)
        self.screen.timeout(0)
        if self.options.invert:
            curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
        else:
            curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
            
        curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_RED)
        curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_GREEN)
        
        self.i = 0
        lastLine = ''
        t1 = 0
        try:
            while not self.exitObject.stopping():
                key = self.inputThread.read()
                if key == 32: #`space` character
                    self.togglePaused()
                    t1 = 0
                    self.showMessage('PAUSED', 'green')
                    
                elif key == 258: #key down
                    t1 = 0
                    
                elif key == 43 or key == 61: #`+` or `=`
                    self.history.speed = self.history.speed + 0.1
                    self.showMessage('SPEED IS NOW %s' % self.history.speed , 'green')
                    
                elif key == 45 or key == 95: #`-` or `_`
                    self.history.speed = self.history.speed - 0.1
                    self.showMessage('SPEED IS NOW %s' % self.history.speed , 'green')
                
                if not self.paused():
                    if time.time()-t1 >= self.history.speed:
                        t1 = time.time()
                        thisLine = self.book.line()
                        self.drawLine(lastLine)
                        if self.i + 2 >= curses.LINES:
                            self.i = 0
                        else:
                            self.i += 1
                        self.drawNewLine(thisLine)
                        lastLine = thisLine
                time.sleep(0.1) #try to save some cpu cycles
        finally:
            #always stop the thread
            self.inputThread.stop()
            self.history.position = self.book.position
            self.history.write()
 
    def showMessage(self, message, style='reverse'):
        '''Show a message on the current line. Style can be 'red', 'green' for
        colour, anything else for reverse video'''
        x = curses.COLS - len(message) - 3
        if style == 'red':
            styleArgument = curses.color_pair(2)
        elif style == 'green':
            styleArgument = curses.color_pair(3)
        else:
            styleArgument = curses.A_REVERSE
        self.screen.addstr(self.i, x, ' ' + message + ' ', styleArgument)
        self.refresh()
		
    def drawNewLine(self, line, y=None, x=0):
        '''Draw a line of underlined text'''
        if y == None:
            y = self.i
        self.screen.addstr(y, x, line[:curses.COLS-1].ljust(curses.COLS), curses.A_UNDERLINE)
        self.refresh()
        
    def drawLine(self, line, y=None, x=0):
        '''Draw a line of normal text'''
        if y == None:
            y = self.i
        self.screen.addstr(y, x, line[:curses.COLS-1].ljust(curses.COLS), curses.color_pair(1))
        self.refresh()
        
    def refresh(self):
        '''Refresh the terminal'''
        self.screen.refresh()
        
    def togglePaused(self):
        '''Pause or un-pause the scrolling of text'''
        self._paused = not self._paused
        
    def paused(self):
        '''Return True if scrolling is paused'''
        return self._paused
        
class Exit(object):
    '''A class to signal when to stop the main program'''
    def __init__(self):
        self._stopping = False
        
    def stop(self):
        '''Signal to stop the program at the next convenient moment'''
        self._stopping = True
        
    def stopping(self):
        '''Return True if the program is stopping'''
        return self._stopping
        
        
class InputThread(Thread):
    '''A thread for taking input from keyboard'''
    def __init__(self, screen, exitObject):
        '''Create thread'''
        Thread.__init__(self, name='InputThread')
        self.screen = screen
        self.exitObject = exitObject
        self._running = True
        self.key = ''
        
    def run(self):
        '''Run the thread. Do not call this directly, use InputThread.start()'''
        while self._running:
            time.sleep(0.05)
            c =  self.screen.getch()
            if c != -1:
                self.key = c
            if self.key == 113 or self.key == 81: #'q' or 'Q'
                self.stop() #stop the thread
                self.exitObject.stop() #stop the main program
            
    def stop(self):
        '''Stop the thread from running'''
        self._running = False
        
    def read(self):
        '''Return the last pressed key'''
        key = self.key
        self.key = ''
        return key
        
if __name__ == '__main__':
    '''Main program bits'''
    usage = 'usage: %prog [options] [book file]'
    parser = OptionParser(usage, description=piebookData.DESCRIPTION, version=piebookData.VERSION)
    parser.add_option('-b', '--beginning',
                      action='store_true',
                      default=False,
                      dest='beginning',
                      help='start the book from the beginning')
                      
    parser.add_option('-i', '--invert',
                      action='store_true',
                      default=False,
                      dest='invert',
                      help='invert the colour of the text to black on white')
                      
                      #TODO add option to start at a percentage of the way through the book
                      
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error('incorrect number of arguments (need only one)')
    else:
        def main(stdscr):
            return BookReader(stdscr, args[0], options)
        curses.wrapper(main) #use the safe curses wrapper in case things get bad
